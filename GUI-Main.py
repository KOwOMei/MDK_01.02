import tkinter as tk
from tkinter import messagebox
from PIL import Image, ImageTk

def determine_triangle_type(a, b, c):

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
    if a + b <= c or a + c <= b or b + c <= a:
        return "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–∞–∫ –∫–∞–∫ —Å—É–º–º–∞ –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω \n –º–µ–Ω—å—à–µ –∏/–∏–ª–∏ —Ä–∞–≤–Ω–∞ –¥–ª–∏–Ω–µ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç–æ—Ä–æ–Ω—ã."
    elif 0 in [a, b, c]:
        return "–¢—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Ç–∞–∫ –∫–∞–∫ –æ–¥–Ω–∞ –∏–∑ —Å—Ç–æ—Ä–æ–Ω —Ä–∞–≤–Ω–∞ –Ω—É–ª—é."
    elif a == b == c:
        return "–†–∞–≤–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
    elif a == b or b == c or a == c:
        return "–†–∞–≤–Ω–æ–±–µ–¥—Ä–µ–Ω–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
    elif a**2 + b**2 == c**2 or a**2 + c**2 == b**2 or b**2 + c**2 == a**2:
        return "–ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
    else:
        sides = sorted([a, b, c])
        largest_side = sides[2]
        other_side1 = sides[0]
        other_side2 = sides[1]
        
        # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –∫–æ—Å–∏–Ω—É—Å–∞ —É–≥–ª–∞ –Ω–∞–ø—Ä–æ—Ç–∏–≤ –Ω–∞–∏–±–æ–ª—å—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã
        cos_larg = (other_side1**2 + other_side2**2 - largest_side**2) / (2 * other_side1 * other_side2)
        
        if cos_larg < 0:
            return "–¢—É–ø–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"
        else:
            return "–û—Å—Ç—Ä–æ—É–≥–æ–ª—å–Ω—ã–π —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫"


def on_check_button_click():
    error_entry = []

    try:
        a = float(entry_a.get())
    except ValueError:
        error_entry.append("–ê")

    try:
        b = float(entry_b.get())
    except ValueError:
        error_entry.append("B")

    try:
        c = float(entry_c.get())
    except ValueError:
        error_entry.append("C")

    if len(error_entry) > 0:
        messagebox.showerror("–û—à–∏–±–∫–∞", f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤ –ø–æ–ª—è \'{', '.join(error_entry)}\' —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è.")
    else:
        result = determine_triangle_type(a, b, c)
        result_label.config(text=result)
        

def create_context_menu(entry):
    menu = tk.Menu(entry, tearoff=0)
    menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: entry.event_generate("<<Copy>>"))
    menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å", command=lambda: entry.event_generate("<<Paste>>"))
    menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å", command=lambda: entry.event_generate("<<Cut>>"))
    return menu

def show_context_menu(event, menu):
    menu.post(event.x_root, event.y_root)


def show_image():
    img = Image.open("circles.png")
    img = img.resize((360, 200), Image.LANCZOS)
    img_tk = ImageTk.PhotoImage(img)
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image_window = tk.Toplevel(root)
    image_window.title("well...")
    image_window.resizable(False, False)  

    # –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –æ–∫–Ω–∞
    window_width = 380
    window_height = 220
    screen_width = image_window.winfo_screenwidth()
    screen_height = image_window.winfo_screenheight()
    position_top = int(screen_height / 2 - window_height / 2)
    position_right = int(screen_width / 2 - window_width / 2)
    image_window.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')

    # –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ –Ω–æ–≤–æ–º –æ–∫–Ω–µ
    image_label = tk.Label(image_window, image=img_tk)
    image_label.image = img_tk  # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å—Å—ã–ª–∫–∏ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    image_label.pack(pady=10)

    image_window.after(7000, image_window.destroy)


# –°–æ–∑–¥–∞–Ω–∏–µ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
root = tk.Tk()
root.iconbitmap("boykisser-spin.ico")
root.title("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–æ–≤")
root.resizable(False, False)  # –ó–∞–ø—Ä–µ—Ç–∏—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞

# –¶–µ–Ω—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–∫–Ω–∞
window_width = 400
window_height = 200
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
position_top = int(screen_height / 2 - window_height / 2)
position_right = int(screen_width / 2 - window_width / 2)
root.geometry(f'{window_width}x{window_height}+{position_right}+{position_top}')

# –ü–æ–ª—è –≤–≤–æ–¥–∞ –¥–ª—è —Å—Ç–æ—Ä–æ–Ω —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞ –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π —Ä—è–¥
frame = tk.Frame(root)
frame.pack(pady=20)

tk.Label(frame, text="–°—Ç–æ—Ä–æ–Ω–∞ A:").grid(row=0, column=0, padx=5)
entry_a = tk.Entry(frame)
entry_a.grid(row=1, column=0, padx=5)

tk.Label(frame, text="–°—Ç–æ—Ä–æ–Ω–∞ B:").grid(row=0, column=1, padx=5)
entry_b = tk.Entry(frame)
entry_b.grid(row=1, column=1, padx=5)

tk.Label(frame, text="–°—Ç–æ—Ä–æ–Ω–∞ C:").grid(row=0, column=2, padx=5)
entry_c = tk.Entry(frame)
entry_c.grid(row=1, column=2, padx=5)

# –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è –≤–≤–æ–¥–∞
context_menu_a = create_context_menu(entry_a)
context_menu_b = create_context_menu(entry_b)
context_menu_c = create_context_menu(entry_c)

# –ü—Ä–∏–≤—è–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–≥–æ –º–µ–Ω—é –∫ –ø–æ–ª—è–º –≤–≤–æ–¥–∞
entry_a.bind("<Button-3>", lambda event: show_context_menu(event, context_menu_a))
entry_b.bind("<Button-3>", lambda event: show_context_menu(event, context_menu_b))
entry_c.bind("<Button-3>", lambda event: show_context_menu(event, context_menu_c))

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ç–∏–ø–∞ —Ç—Ä–µ—É–≥–æ–ª—å–Ω–∏–∫–∞
check_button = tk.Button(root, text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", command=on_check_button_click)
check_button.pack(pady=5)

# –ö–Ω–æ–ø–∫–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ –∫—Ä—É–≥–∞
circle_button = tk.Button(root, text="üü£", command=show_image)
circle_button.pack(pady=5)

# –ú–µ—Ç–∫–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
result_label = tk.Label(root, text="")
result_label.pack(pady=5)

# –ó–∞–ø—É—Å–∫ –≥–ª–∞–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
root.mainloop()